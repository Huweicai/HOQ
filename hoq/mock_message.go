// Code generated by MockGen. DO NOT EDIT.
// Source: HOQ/hoq (interfaces: Message)

// Package mock is a generated GoMock package.
package hoq

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// EatFirstLine mocks base method
func (m *MockMessage) EatFirstLine(arg0 string) error {
	ret := m.ctrl.Call(m, "EatFirstLine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EatFirstLine indicates an expected call of EatFirstLine
func (mr *MockMessageMockRecorder) EatFirstLine(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EatFirstLine", reflect.TypeOf((*MockMessage)(nil).EatFirstLine), arg0)
}

// FirstLine mocks base method
func (m *MockMessage) FirstLine() string {
	ret := m.ctrl.Call(m, "FirstLine")
	ret0, _ := ret[0].(string)
	return ret0
}

// FirstLine indicates an expected call of FirstLine
func (mr *MockMessageMockRecorder) FirstLine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstLine", reflect.TypeOf((*MockMessage)(nil).FirstLine))
}

// GetBody mocks base method
func (m *MockMessage) GetBody() io.Reader {
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// GetBody indicates an expected call of GetBody
func (mr *MockMessageMockRecorder) GetBody() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockMessage)(nil).GetBody))
}

// GetHeader mocks base method
func (m *MockMessage) GetHeader() *Headers {
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(*Headers)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockMessageMockRecorder) GetHeader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockMessage)(nil).GetHeader))
}

// SetBody mocks base method
func (m *MockMessage) SetBody(arg0 io.Reader) {
	m.ctrl.Call(m, "SetBody", arg0)
}

// SetBody indicates an expected call of SetBody
func (mr *MockMessageMockRecorder) SetBody(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockMessage)(nil).SetBody), arg0)
}

// SetHeader mocks base method
func (m *MockMessage) SetHeader(arg0 *Headers) {
	m.ctrl.Call(m, "SetHeader", arg0)
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockMessageMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMessage)(nil).SetHeader), arg0)
}
